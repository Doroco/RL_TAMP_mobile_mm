function __getObjectPosition__(a,b)
    -- compatibility routine, wrong results could be returned in some situations, in CoppeliaSim <4.0.1
    if b==sim.handle_parent then
        b=sim.getObjectParent(a)
    end
    if (b~=-1) and (sim.getObjectType(b)==sim.object_joint_type) and (sim.getInt32Param(sim.intparam_program_version)>=40001) then
        a=a+sim.handleflag_reljointbaseframe
    end
    return sim.getObjectPosition(a,b)
end
function __getObjectQuaternion__(a,b)
    -- compatibility routine, wrong results could be returned in some situations, in CoppeliaSim <4.0.1
    if b==sim.handle_parent then
        b=sim.getObjectParent(a)
    end
    if (b~=-1) and (sim.getObjectType(b)==sim.object_joint_type) and (sim.getInt32Param(sim.intparam_program_version)>=40001) then
        a=a+sim.handleflag_reljointbaseframe
    end
    return sim.getObjectQuaternion(a,b)
end

function getTransformStamped(objHandle, name, relTo, relToName)
  -- This function retrieves the stamped transform for a specific object
  t = simROS.getTime()
  p = __getObjectPosition__(objHandle, relTo)
  o = __getObjectQuaternion__(objHandle, relTo)
  return {
      header = {stamp=t, frame_id=relToName},
      child_frame_id = name,
      transform = {
        translation={x=p[1],y=p[2],z=p[3]},
        rotation={x=o[1],y=o[2],z=o[3],w=o[4]}
              }
      }
end

function sysCall_init() 
    kinectHandle=sim.getObjectHandle('kinect')
    depthCam=sim.getObjectHandle('kinect_depth')
    colorCam=sim.getObjectHandle('kinect_rgb')
    
    depth_pub=simROS.advertise('/depth/image_raw', 'sensor_msgs/Image')
    simROS.publisherTreatUInt8ArrayAsString(depth_pub) -- treat uint8 arrays as strings (much faster, tables/arrays are kind of slow in Lua)
   
    rgb_pub=simROS.advertise('/k4a/rgb/image_rect_color', 'sensor_msgs/Image')
    simROS.publisherTreatUInt8ArrayAsString(rgb_pub) -- treat uint8 arrays as strings (much faster, tables/arrays are kind of slow in Lua)

    info_pub=simROS.advertise('/depth/camera_info', 'sensor_msgs/CameraInfo')
    simROS.publisherTreatUInt8ArrayAsString(info_pub)
	
    depth_array_pub = simROS.advertise('/vrep/depth', 'std_msgs/Float32MultiArray')
    baseLinkHandle = sim.getObjectHandle("Base_link") -- lyz added
end

function sysCall_sensing()
    -- Publish the image of the active vision sensor:
    local data=sim.getVisionSensorDepthBuffer(depthCam+sim.handleflag_codedstring)
    local res,nearClippingPlane=sim.getObjectFloatParameter(depthCam,sim.visionfloatparam_near_clipping)
    local res,farClippingPlane=sim.getObjectFloatParameter(depthCam,sim.visionfloatparam_far_clipping)

    nearClippingPlane=nearClippingPlane*1000 -- we want mm
    farClippingPlane=farClippingPlane*1000 -- we want mm

    data=sim.transformBuffer(data,sim.buffer_float,farClippingPlane-nearClippingPlane,nearClippingPlane,sim.buffer_uint16)
    local res=sim.getVisionSensorResolution(depthCam)
    d_depth={}
    d_depth['header']={seq=0,stamp=simROS.getTime(), frame_id="map"}
    d_depth['height']=res[2]
    d_depth['width']=res[1]
    d_depth['encoding']='32UC1' 
    d_depth['is_bigendian']=0
    d_depth['step']=res[1]*2 --res[2]
    d_depth['data']=data --data
    simROS.publish(depth_pub,d_depth)
    
    local depth
    tb_depth={}
    tb_depth['data']=sim.getVisionSensorDepthBuffer(depthCam)
    simROS.publish(depth_array_pub, tb_depth)
    
    local ress,view_angle=sim.getObjectFloatParameter(depthCam, sim.visionfloatparam_perspective_angle)
    f_x = (res[1]/2)/math.tan(view_angle/2);
    f_y = f_x;
    ci={}
    ci['header']={seq=0,stamp=simROS.getTime(), frame_id="map"}
    ci['height']=res[2]
    ci['width']=res[1]
    ci['distortion_model']='plumb_bob'
    
    ci['D']={0, 0, 0, 0, 0}
    ci['K']={f_x, 0, res[1]/2, 0, f_y, res[2]/2, 0, 0, 1}
    ci['R']={1, 0, 0, 0, 1, 0, 0, 0, 1}
    ci['P']={f_x, 0, res[1]/2, 0, 0, f_y, res[2]/2, 0, 0, 0, 1, 0}
    ci['binning_x']= 0
    ci['binning_y']= 0
    ci['roi']= {x_offset=0, y_offset=0, width = 0, height = 0, do_rectify= false}
    simROS.publish(info_pub,ci)

    -- Publish the image of the active vision sensor:
    -- Must open the kinect_rgb_front_down explicit handling
    local data_rgb,w,h=sim.getVisionSensorCharImage(colorCam)
    d_rgb={}
    d_rgb['header']={seq=0,stamp=simROS.getTime(), frame_id="map"}
    d_rgb['height']=h
    d_rgb['width']=w
    d_rgb['encoding']='rgb8'
    d_rgb['is_bigendian']=0
    d_rgb['step']=w*3 -- rosrun image_view image_view image:=/rgb_image 
    d_rgb['data']=data_rgb
    simROS.publish(rgb_pub,d_rgb)
 
    simROS.sendTransform(getTransformStamped(depthCam,'map',baseLinkHandle,'base_link'))
end

function sysCall_cleanup()
    simROS.shutdownPublisher(rgb_pub)
    simROS.shutdownPublisher(depth_pub) 
    simROS.shutdownPublisher(depth_array_pub)
    simROS.shutdownPublisher(info_pub)
end 



------------------------- grasp data -----------------------------------------------------------------------------------------------
header: 
  seq: 144
  stamp: 
    secs: 0
    nsecs:         0
  frame_id: "rgb_optical_frame"
grasps: 
  - 
    position: 
      x: 0.005349214755890379
      y: 0.29167141119290857
      z: 3.045161183218673
    approach: 
      x: 0.0016649097536617556
      y: 0.0023747117365735242
      z: 0.9999957944009967
    binormal: 
      x: 0.9999985956127705
      y: -0.00019591173747848635
      z: -0.0016644491815872556
    axis: 
      x: 0.00019195832654583298
      y: 0.9999971611773502
      z: -0.002375034576921272
    width: 
      data: 0.012007035315036774
    score: 
      data: -182.82186889648438
    sample: 
      x: -0.001284144353121519
      y: 0.2917202115058899
      z: 3.0651721954345703
  - 
    position: 
      x: 0.005811370961029684
      y: 0.2916681271220626
      z: 3.045171402914549
    approach: 
      x: 0.0007797755652560414
      y: 0.002603971373859099
      z: 0.9999963056347517
    binormal: 
      x: 0.9999996959720348
      y: -4.460715098927175e-06
      z: -0.0007797665933506426
    axis: 
      x: 2.4302087320396292e-06
      y: 0.9999966096508458
      z: -0.0026039740605356184
    width: 
      data: 0.012000156566500664
    score: 
      data: -401.0882873535156
    sample: 
      x: 0.004715855699032545
      y: 0.2917202115058899
      z: 3.0651721954345703
  - 
    position: 
      x: 0.0032455297926901397
      y: 0.2946721093206657
      z: 3.0451780222957265
    approach: 
      x: 0.0012942605223699676
      y: 0.0024056397445227935
      z: 0.9999962688865996
    binormal: 
      x: 0.9999991624437077
      y: -4.372009573385462e-06
      z: -0.0012942537498814397
    axis: 
      x: 1.2584850007095003e-06
      y: 0.9999971064349663
      z: -0.0024056433881834817
    width: 
      data: 0.012000147253274918
    score: 
      data: -426.0906677246094
    sample: 
      x: 0.007715855725109577
      y: 0.29472020268440247
      z: 3.0651721954345703
  - 
    position: 
      x: 0.0032520536815067638
      y: 0.28194322340228645
      z: 3.0451916085460655
    approach: 
      x: 0.000967984111860194
      y: 0.038853199357145596
      z: 0.9992444605332935
    binormal: 
      x: 0.9999995313072612
      y: -1.7824814907119222e-05
      z: -0.0009680224862790221
    axis: 
      x: -1.9799423085628436e-05
      y: 0.9992449292250573
      z: -0.03885319840107081
    width: 
      data: 0.012000635266304016
    score: 
      data: -550.5242309570312
    sample: 
      x: 0.007715855725109577
      y: 0.2827202081680298
      z: 3.0651721954345703
  - 
    position: 
      x: 0.0028077049658464734
      y: 0.2819431232043757
      z: 3.045186236063499
    approach: 
      x: 0.0009630651377050375
      y: 0.038853199340376496
      z: 0.9992444652869273
    binormal: 
      x: 0.9999995360805555
      y: -1.8879161901415038e-05
      z: -0.0009630587994333608
    axis: 
      x: -1.8553017471643242e-05
      y: 0.9992449292063452
      z: -0.038853199497484496
    width: 
      data: 0.012000673450529575
    score: 
      data: -567.0256958007812
    sample: 
      x: 0.001715855672955513
      y: 0.2827202081680298
      z: 3.0651721954345703
---
